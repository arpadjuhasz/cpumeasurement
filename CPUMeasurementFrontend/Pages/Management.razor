@page "/management"

@using CPUMeasurementFrontend.Data
@using CPUMeasurementCommon.DataObjects
@inject ManagementService _managementService
@inject NavigationManager _navigationManager
@inject AccountService  _accountService

@code {
    private List<ManagementData> _result;
    private int _measurementInterval;

    private async Task UpdateMeasurementInterval(string clientIPAddress, int measurementInterval)
    {

        await _managementService.UpdateMeasurementInterval(clientIPAddress, measurementInterval);
    }

    protected override async Task OnInitializedAsync()
    {
        if (_accountService.IsLoggedIn())
        {
            _result = await _managementService.GetConnectedClients();
        }
        else
        {
            _navigationManager.NavigateTo("login", true);
        }
    }
}

<table>
    <thead>
        <tr>
            <td>IP</td>
            <td>Last updated</td>
            <td>CPU</td>
            <td>Desktop name</td>
            <td>Measurement interval</td>
        </tr>
    </thead>
    <tbody>
        @if (_result != null)
            @foreach (var item in _result)
            {
                <tr>
                    <td>@item.IPv4Address</td>
                    <td>@item.LastUpdate</td>
                    <td>@item.CPUName</td>
                    <td>@item.ComputerName</td>
                    <td><input type="number" @bind="@item.MeasurementInterval" /><button @onclick="@(e => UpdateMeasurementInterval(item.IPv4Address, item.MeasurementInterval))" class="btn btn-success">Update</button>></td>
                </tr>
            }
    </tbody>
</table>