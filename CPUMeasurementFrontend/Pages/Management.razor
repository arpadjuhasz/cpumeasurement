@page "/management"

@using CPUMeasurementFrontend.Data
@using CPUMeasurementCommon.DataObjects
@inject ManagementService _managementService
@inject NavigationManager _navigationManager
@inject AccountService  _accountService

@code {
    private List<ManagementData> _result;
    private int _measurementInterval;

    private async Task UpdateMeasurementInterval(string clientIPAddress, int measurementInterval)
    {

        await _managementService.UpdateMeasurementInterval(clientIPAddress, measurementInterval);
    }

    protected override async Task OnInitializedAsync()
    {
        if (_accountService.IsLoggedIn())
        {
            _result = await _managementService.GetConnectedClients();
        }
        else
        {
            _navigationManager.NavigateTo("login", true);
        }
    }
}
<h2>Management</h2>

        <div class="row">
            <div class="col-md-2">IP</div>
            <div class="col-md-2">Last updated</div>
            <div class="col-md-2">CPU</div>
            <div class="col-md-2">Desktop name</div>
            <div class="col-md-4">Measurement interval</div>
        </div>
    
        @if (_result != null)
            @foreach (var item in _result)
            {
                <div class="row">
                    <div class="col-md-2">@item.IPv4Address</div>
                    <div class="col-md-2">@item.LastUpdate</div>
                    <div  class="col-md-2">@item.CPUName</div>
                    <div  class="col-md-2">@item.ComputerName</div>
                    <div  class="col-md-4"><input type="number" @bind="@item.MeasurementInterval" /><button @onclick="@(e => UpdateMeasurementInterval(item.IPv4Address, item.MeasurementInterval))" class="btn btn-success">Update</button>></div>
                </div>
            }
    