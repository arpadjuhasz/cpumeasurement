@page "/measurement"
@using CPUMeasurementFrontend.Data
@using CPUMeasurementCommon.DataObjects
@inject MeasurementService _measurementService
@inject NavigationManager _navigationManager
@inject AccountService  _accountService
@code {
    private List<MeasurementData> _result;
    private DateTime? _date = DateTime.Now;
    private string _ipAddress;
    private bool _isDateChecked = false;
    private bool _isIPAddressChecked = false;

    protected override async Task OnInitializedAsync()
    {
        if (_accountService.IsLoggedIn())
        {
            _result = await _measurementService.GetMeasurementData(null, null);
        }
        else
        {
            _navigationManager.NavigateTo("login", true);
        }
    }

    protected async Task GetCPUDataByDate()
    {
        if (!_isDateChecked)
        { _date = null; }
        if (!_isIPAddressChecked)
        { _ipAddress = null; }
        _result = await _measurementService.GetMeasurementData(_date, _ipAddress);
    }
}
<h2>Measurements</h2>

<label>With date </label><input  class="input-lg" type="checkbox" @bind="@_isDateChecked"><input type="date" @bind="@_date" /><br/>
<label>With IP</label><input type="checkbox" @bind="@_isIPAddressChecked"><input type="text" @bind="@_ipAddress" /><br/>
<button class="btn btn-info" @onclick="@GetCPUDataByDate">Filter</button>


        <div class="row">
            <div class="col-md-2">Received</div>
            <div class="col-md-2">IPv4</div>
            <div class="col-md-2">Temperature</div>
            <div class="col-md-2">Avg. Load</div>
            <div class="col-md-2">Meas. Interval (s)</div>
            <div class="col-md-2">Meas. date</div>
        </div>
    
    @if (_result != null)
    {
        
            @foreach (var item in _result)
            {
            <div class="row">
                <div class="col-md-2">@item.Received.ToLocalTime()</div>
                <div class="col-md-2">@item.IPAddress</div>
                <div class="col-md-2">@(item.Temperature.Value.HasValue ? $"{item.Temperature.Value.Value.ToString("n2")} {item.Temperature.MeasurementUnit.ToString()[0]}" : "n.a")</div>
                <div class="col-md-2">@(item.AverageLoad.HasValue ? $"{item.AverageLoad} %" : "n.a")</div>
                <div class="col-md-2">@item.MeasurementIntervalInSeconds</div>
                <div class="col-md-2">@item.MeasurementDate.ToLocalTime()</div>
            </div>
            }
       
    }

